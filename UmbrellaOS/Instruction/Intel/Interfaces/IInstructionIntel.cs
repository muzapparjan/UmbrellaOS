using UmbrellaOS.Instruction.Interfaces;

namespace UmbrellaOS.Instruction.Intel.Interfaces
{
    /**
     * <summary>
     * Intel's Instruction Set Architecture (ISA) is a set of rules and standards that
     * defines how a processor should execute various instructions.
     * It serves as a bridge between the software and the hardware,
     * specifying how the processor should interact with the computer's memory,
     * input/output devices, and other components.<br/><br/>
     * The ISA defines a set of instructions and operation codes that
     * tell the processor what tasks to perform.
     * These instructions can be grouped into categories such as arithmetic,
     * logic, shift, compare, and data transfer operations.
     * It also defines processor registers, memory addressing modes,
     * exception handling, and input/output operations.<br/><br/>
     * The ISA has evolved over time to meet the changing needs of software developers and improve processor performance.
     * Intel's x86 ISA is one of the most widely used ISAs in the world. It has gone through various iterations and extensions,
     * such as the addition of 64-bit support with Intel's 64 architecture (also known as x86_64 or AMD64).<br/><br/>
     * Intel has also introduced extensions to its ISA over time to improve performance and functionality.
     * Examples include SSE (Streaming SIMD Extensions) and AVX (Advanced Vector Extensions),
     * which enhance floating-point operations and parallel processing capabilities, respectively.<br/><br/>
     * In summary, Intel's Instruction Set Architecture serves as a standard that
     * specifies how processors should execute instructions and interact with
     * the computer's hardware and software.
     * Its evolution has allowed for improved performance, functionality,
     * and compatibility with software applications, driving the advancement of the computing industry.<br/><br/>
     * Note:<br/>
     * · This summary above was generated by AI "文心一言" and was granted to use there.<br/>
     * · Link: https://yiyan.baidu.com/share/VKCVuapycq<br/><br/>
     * ----------------------------------------------------------------------------------------------------<br/><br/>
     * All Intel Architecture instructions are encoded using subsets of the general machine instruction format shown below.<br/>
     * · Legacy Prefixes: Group 1/2/3/4<br/>
     * · REX Prefixes: optional<br/>
     * · Opcodes: 1-,2-, or 3- bytes<br/>
     * · ModR/M: Mod-Reg-R/M<br/>
     * · SIB: Scale-Index-Base<br/>
     * · Displacement: Address Displacement(1,2,4 bytes or none)<br/>
     * · Immediate: Immediate Data(1,2,4 bytes or none)<br/><br/>
     * Each instruction consists of:<br/>
     * · an opcode<br/>
     * · a register and/or address mode specifier consisting of the ModR/M byte and sometimes the scale-index-base (SIB) byte (if required)<br/>
     * · an opcode<br/><br/>
     * In general, instructions consist of optional instruction prefixes (in any order),
     * primary opcode bytes (up to three bytes), an addressing-form specifier
     * (if required)consisting of the ModR/M byte and sometimes the SIB (Scale-Index-Base) byte,
     * a displacement (if required), and an immediate data field (if required).
     * </summary>
     * <seealso cref="IInstruction"/>
     */
    public interface IInstructionIntel : IInstruction
    {
        public IInstructionIntelBitMode BitMode { get; }
        public IInstructionIntelPrefixLegacy[]? LegacyPrefixes { get; }
        public IInstructionIntelPrefix[]? REXPrefixes { get; }
        public IInstructionIntelOpcode Opcode { get; }
        public IInstructionIntelModRM? ModRMM { get; }
        public IInstructionIntelSIB? SIB { get; }
        public IInstructionIntelDisplacement? Displacement { get; }
        public IInstructionIntelImmediate? Immediate { get; }
    }
}